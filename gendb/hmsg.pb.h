// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmsg.proto

#ifndef PROTOBUF_INCLUDED_hmsg_2eproto
#define PROTOBUF_INCLUDED_hmsg_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_hmsg_2eproto 

namespace protobuf_hmsg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_hmsg_2eproto
class Hmsg;
class HmsgDefaultTypeInternal;
extern HmsgDefaultTypeInternal _Hmsg_default_instance_;
class HmsgExit;
class HmsgExitDefaultTypeInternal;
extern HmsgExitDefaultTypeInternal _HmsgExit_default_instance_;
class HmsgFileOpen;
class HmsgFileOpenDefaultTypeInternal;
extern HmsgFileOpenDefaultTypeInternal _HmsgFileOpen_default_instance_;
class HmsgProcEnd;
class HmsgProcEndDefaultTypeInternal;
extern HmsgProcEndDefaultTypeInternal _HmsgProcEnd_default_instance_;
class HmsgProcStart;
class HmsgProcStartDefaultTypeInternal;
extern HmsgProcStartDefaultTypeInternal _HmsgProcStart_default_instance_;
namespace google {
namespace protobuf {
template<> ::Hmsg* Arena::CreateMaybeMessage<::Hmsg>(Arena*);
template<> ::HmsgExit* Arena::CreateMaybeMessage<::HmsgExit>(Arena*);
template<> ::HmsgFileOpen* Arena::CreateMaybeMessage<::HmsgFileOpen>(Arena*);
template<> ::HmsgProcEnd* Arena::CreateMaybeMessage<::HmsgProcEnd>(Arena*);
template<> ::HmsgProcStart* Arena::CreateMaybeMessage<::HmsgProcStart>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class HmsgProcStart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HmsgProcStart) */ {
 public:
  HmsgProcStart();
  virtual ~HmsgProcStart();

  HmsgProcStart(const HmsgProcStart& from);

  inline HmsgProcStart& operator=(const HmsgProcStart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HmsgProcStart(HmsgProcStart&& from) noexcept
    : HmsgProcStart() {
    *this = ::std::move(from);
  }

  inline HmsgProcStart& operator=(HmsgProcStart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HmsgProcStart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HmsgProcStart* internal_default_instance() {
    return reinterpret_cast<const HmsgProcStart*>(
               &_HmsgProcStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(HmsgProcStart* other);
  friend void swap(HmsgProcStart& a, HmsgProcStart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HmsgProcStart* New() const final {
    return CreateMaybeMessage<HmsgProcStart>(NULL);
  }

  HmsgProcStart* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HmsgProcStart>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HmsgProcStart& from);
  void MergeFrom(const HmsgProcStart& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HmsgProcStart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string argv = 3;
  int argv_size() const;
  void clear_argv();
  static const int kArgvFieldNumber = 3;
  const ::std::string& argv(int index) const;
  ::std::string* mutable_argv(int index);
  void set_argv(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_argv(int index, ::std::string&& value);
  #endif
  void set_argv(int index, const char* value);
  void set_argv(int index, const char* value, size_t size);
  ::std::string* add_argv();
  void add_argv(const ::std::string& value);
  #if LANG_CXX11
  void add_argv(::std::string&& value);
  #endif
  void add_argv(const char* value);
  void add_argv(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& argv() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_argv();

  // int64 pid = 1;
  void clear_pid();
  static const int kPidFieldNumber = 1;
  ::google::protobuf::int64 pid() const;
  void set_pid(::google::protobuf::int64 value);

  // int64 ppid = 2;
  void clear_ppid();
  static const int kPpidFieldNumber = 2;
  ::google::protobuf::int64 ppid() const;
  void set_ppid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:HmsgProcStart)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> argv_;
  ::google::protobuf::int64 pid_;
  ::google::protobuf::int64 ppid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_hmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HmsgProcEnd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HmsgProcEnd) */ {
 public:
  HmsgProcEnd();
  virtual ~HmsgProcEnd();

  HmsgProcEnd(const HmsgProcEnd& from);

  inline HmsgProcEnd& operator=(const HmsgProcEnd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HmsgProcEnd(HmsgProcEnd&& from) noexcept
    : HmsgProcEnd() {
    *this = ::std::move(from);
  }

  inline HmsgProcEnd& operator=(HmsgProcEnd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HmsgProcEnd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HmsgProcEnd* internal_default_instance() {
    return reinterpret_cast<const HmsgProcEnd*>(
               &_HmsgProcEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(HmsgProcEnd* other);
  friend void swap(HmsgProcEnd& a, HmsgProcEnd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HmsgProcEnd* New() const final {
    return CreateMaybeMessage<HmsgProcEnd>(NULL);
  }

  HmsgProcEnd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HmsgProcEnd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HmsgProcEnd& from);
  void MergeFrom(const HmsgProcEnd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HmsgProcEnd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 pid = 1;
  void clear_pid();
  static const int kPidFieldNumber = 1;
  ::google::protobuf::int64 pid() const;
  void set_pid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:HmsgProcEnd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 pid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_hmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HmsgFileOpen : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HmsgFileOpen) */ {
 public:
  HmsgFileOpen();
  virtual ~HmsgFileOpen();

  HmsgFileOpen(const HmsgFileOpen& from);

  inline HmsgFileOpen& operator=(const HmsgFileOpen& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HmsgFileOpen(HmsgFileOpen&& from) noexcept
    : HmsgFileOpen() {
    *this = ::std::move(from);
  }

  inline HmsgFileOpen& operator=(HmsgFileOpen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HmsgFileOpen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HmsgFileOpen* internal_default_instance() {
    return reinterpret_cast<const HmsgFileOpen*>(
               &_HmsgFileOpen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(HmsgFileOpen* other);
  friend void swap(HmsgFileOpen& a, HmsgFileOpen& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HmsgFileOpen* New() const final {
    return CreateMaybeMessage<HmsgFileOpen>(NULL);
  }

  HmsgFileOpen* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HmsgFileOpen>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HmsgFileOpen& from);
  void MergeFrom(const HmsgFileOpen& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HmsgFileOpen* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 2;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // int64 pid = 1;
  void clear_pid();
  static const int kPidFieldNumber = 1;
  ::google::protobuf::int64 pid() const;
  void set_pid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:HmsgFileOpen)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::int64 pid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_hmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HmsgExit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HmsgExit) */ {
 public:
  HmsgExit();
  virtual ~HmsgExit();

  HmsgExit(const HmsgExit& from);

  inline HmsgExit& operator=(const HmsgExit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HmsgExit(HmsgExit&& from) noexcept
    : HmsgExit() {
    *this = ::std::move(from);
  }

  inline HmsgExit& operator=(HmsgExit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HmsgExit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HmsgExit* internal_default_instance() {
    return reinterpret_cast<const HmsgExit*>(
               &_HmsgExit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(HmsgExit* other);
  friend void swap(HmsgExit& a, HmsgExit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HmsgExit* New() const final {
    return CreateMaybeMessage<HmsgExit>(NULL);
  }

  HmsgExit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HmsgExit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HmsgExit& from);
  void MergeFrom(const HmsgExit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HmsgExit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:HmsgExit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_hmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Hmsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Hmsg) */ {
 public:
  Hmsg();
  virtual ~Hmsg();

  Hmsg(const Hmsg& from);

  inline Hmsg& operator=(const Hmsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Hmsg(Hmsg&& from) noexcept
    : Hmsg() {
    *this = ::std::move(from);
  }

  inline Hmsg& operator=(Hmsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Hmsg& default_instance();

  enum MsgCase {
    kProcStart = 2,
    kProcEnd = 3,
    kFileOpen = 4,
    kExit = 5,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hmsg* internal_default_instance() {
    return reinterpret_cast<const Hmsg*>(
               &_Hmsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Hmsg* other);
  friend void swap(Hmsg& a, Hmsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Hmsg* New() const final {
    return CreateMaybeMessage<Hmsg>(NULL);
  }

  Hmsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Hmsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Hmsg& from);
  void MergeFrom(const Hmsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hmsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .HmsgProcStart proc_start = 2;
  bool has_proc_start() const;
  void clear_proc_start();
  static const int kProcStartFieldNumber = 2;
  private:
  const ::HmsgProcStart& _internal_proc_start() const;
  public:
  const ::HmsgProcStart& proc_start() const;
  ::HmsgProcStart* release_proc_start();
  ::HmsgProcStart* mutable_proc_start();
  void set_allocated_proc_start(::HmsgProcStart* proc_start);

  // .HmsgProcEnd proc_end = 3;
  bool has_proc_end() const;
  void clear_proc_end();
  static const int kProcEndFieldNumber = 3;
  private:
  const ::HmsgProcEnd& _internal_proc_end() const;
  public:
  const ::HmsgProcEnd& proc_end() const;
  ::HmsgProcEnd* release_proc_end();
  ::HmsgProcEnd* mutable_proc_end();
  void set_allocated_proc_end(::HmsgProcEnd* proc_end);

  // .HmsgFileOpen file_open = 4;
  bool has_file_open() const;
  void clear_file_open();
  static const int kFileOpenFieldNumber = 4;
  private:
  const ::HmsgFileOpen& _internal_file_open() const;
  public:
  const ::HmsgFileOpen& file_open() const;
  ::HmsgFileOpen* release_file_open();
  ::HmsgFileOpen* mutable_file_open();
  void set_allocated_file_open(::HmsgFileOpen* file_open);

  // .HmsgExit exit = 5;
  bool has_exit() const;
  void clear_exit();
  static const int kExitFieldNumber = 5;
  private:
  const ::HmsgExit& _internal_exit() const;
  public:
  const ::HmsgExit& exit() const;
  ::HmsgExit* release_exit();
  ::HmsgExit* mutable_exit();
  void set_allocated_exit(::HmsgExit* exit);

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:Hmsg)
 private:
  void set_has_proc_start();
  void set_has_proc_end();
  void set_has_file_open();
  void set_has_exit();

  inline bool has_msg() const;
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union MsgUnion {
    MsgUnion() {}
    ::HmsgProcStart* proc_start_;
    ::HmsgProcEnd* proc_end_;
    ::HmsgFileOpen* file_open_;
    ::HmsgExit* exit_;
  } msg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_hmsg_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HmsgProcStart

// int64 pid = 1;
inline void HmsgProcStart::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 HmsgProcStart::pid() const {
  // @@protoc_insertion_point(field_get:HmsgProcStart.pid)
  return pid_;
}
inline void HmsgProcStart::set_pid(::google::protobuf::int64 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:HmsgProcStart.pid)
}

// int64 ppid = 2;
inline void HmsgProcStart::clear_ppid() {
  ppid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 HmsgProcStart::ppid() const {
  // @@protoc_insertion_point(field_get:HmsgProcStart.ppid)
  return ppid_;
}
inline void HmsgProcStart::set_ppid(::google::protobuf::int64 value) {
  
  ppid_ = value;
  // @@protoc_insertion_point(field_set:HmsgProcStart.ppid)
}

// repeated string argv = 3;
inline int HmsgProcStart::argv_size() const {
  return argv_.size();
}
inline void HmsgProcStart::clear_argv() {
  argv_.Clear();
}
inline const ::std::string& HmsgProcStart::argv(int index) const {
  // @@protoc_insertion_point(field_get:HmsgProcStart.argv)
  return argv_.Get(index);
}
inline ::std::string* HmsgProcStart::mutable_argv(int index) {
  // @@protoc_insertion_point(field_mutable:HmsgProcStart.argv)
  return argv_.Mutable(index);
}
inline void HmsgProcStart::set_argv(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HmsgProcStart.argv)
  argv_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HmsgProcStart::set_argv(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:HmsgProcStart.argv)
  argv_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HmsgProcStart::set_argv(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  argv_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:HmsgProcStart.argv)
}
inline void HmsgProcStart::set_argv(int index, const char* value, size_t size) {
  argv_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:HmsgProcStart.argv)
}
inline ::std::string* HmsgProcStart::add_argv() {
  // @@protoc_insertion_point(field_add_mutable:HmsgProcStart.argv)
  return argv_.Add();
}
inline void HmsgProcStart::add_argv(const ::std::string& value) {
  argv_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:HmsgProcStart.argv)
}
#if LANG_CXX11
inline void HmsgProcStart::add_argv(::std::string&& value) {
  argv_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:HmsgProcStart.argv)
}
#endif
inline void HmsgProcStart::add_argv(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  argv_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:HmsgProcStart.argv)
}
inline void HmsgProcStart::add_argv(const char* value, size_t size) {
  argv_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:HmsgProcStart.argv)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HmsgProcStart::argv() const {
  // @@protoc_insertion_point(field_list:HmsgProcStart.argv)
  return argv_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HmsgProcStart::mutable_argv() {
  // @@protoc_insertion_point(field_mutable_list:HmsgProcStart.argv)
  return &argv_;
}

// -------------------------------------------------------------------

// HmsgProcEnd

// int64 pid = 1;
inline void HmsgProcEnd::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 HmsgProcEnd::pid() const {
  // @@protoc_insertion_point(field_get:HmsgProcEnd.pid)
  return pid_;
}
inline void HmsgProcEnd::set_pid(::google::protobuf::int64 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:HmsgProcEnd.pid)
}

// -------------------------------------------------------------------

// HmsgFileOpen

// int64 pid = 1;
inline void HmsgFileOpen::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 HmsgFileOpen::pid() const {
  // @@protoc_insertion_point(field_get:HmsgFileOpen.pid)
  return pid_;
}
inline void HmsgFileOpen::set_pid(::google::protobuf::int64 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:HmsgFileOpen.pid)
}

// string path = 2;
inline void HmsgFileOpen::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HmsgFileOpen::path() const {
  // @@protoc_insertion_point(field_get:HmsgFileOpen.path)
  return path_.GetNoArena();
}
inline void HmsgFileOpen::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HmsgFileOpen.path)
}
#if LANG_CXX11
inline void HmsgFileOpen::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HmsgFileOpen.path)
}
#endif
inline void HmsgFileOpen::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HmsgFileOpen.path)
}
inline void HmsgFileOpen::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HmsgFileOpen.path)
}
inline ::std::string* HmsgFileOpen::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:HmsgFileOpen.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HmsgFileOpen::release_path() {
  // @@protoc_insertion_point(field_release:HmsgFileOpen.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HmsgFileOpen::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:HmsgFileOpen.path)
}

// -------------------------------------------------------------------

// HmsgExit

// -------------------------------------------------------------------

// Hmsg

// .HmsgProcStart proc_start = 2;
inline bool Hmsg::has_proc_start() const {
  return msg_case() == kProcStart;
}
inline void Hmsg::set_has_proc_start() {
  _oneof_case_[0] = kProcStart;
}
inline void Hmsg::clear_proc_start() {
  if (has_proc_start()) {
    delete msg_.proc_start_;
    clear_has_msg();
  }
}
inline const ::HmsgProcStart& Hmsg::_internal_proc_start() const {
  return *msg_.proc_start_;
}
inline ::HmsgProcStart* Hmsg::release_proc_start() {
  // @@protoc_insertion_point(field_release:Hmsg.proc_start)
  if (has_proc_start()) {
    clear_has_msg();
      ::HmsgProcStart* temp = msg_.proc_start_;
    msg_.proc_start_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HmsgProcStart& Hmsg::proc_start() const {
  // @@protoc_insertion_point(field_get:Hmsg.proc_start)
  return has_proc_start()
      ? *msg_.proc_start_
      : *reinterpret_cast< ::HmsgProcStart*>(&::_HmsgProcStart_default_instance_);
}
inline ::HmsgProcStart* Hmsg::mutable_proc_start() {
  if (!has_proc_start()) {
    clear_msg();
    set_has_proc_start();
    msg_.proc_start_ = CreateMaybeMessage< ::HmsgProcStart >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Hmsg.proc_start)
  return msg_.proc_start_;
}

// .HmsgProcEnd proc_end = 3;
inline bool Hmsg::has_proc_end() const {
  return msg_case() == kProcEnd;
}
inline void Hmsg::set_has_proc_end() {
  _oneof_case_[0] = kProcEnd;
}
inline void Hmsg::clear_proc_end() {
  if (has_proc_end()) {
    delete msg_.proc_end_;
    clear_has_msg();
  }
}
inline const ::HmsgProcEnd& Hmsg::_internal_proc_end() const {
  return *msg_.proc_end_;
}
inline ::HmsgProcEnd* Hmsg::release_proc_end() {
  // @@protoc_insertion_point(field_release:Hmsg.proc_end)
  if (has_proc_end()) {
    clear_has_msg();
      ::HmsgProcEnd* temp = msg_.proc_end_;
    msg_.proc_end_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HmsgProcEnd& Hmsg::proc_end() const {
  // @@protoc_insertion_point(field_get:Hmsg.proc_end)
  return has_proc_end()
      ? *msg_.proc_end_
      : *reinterpret_cast< ::HmsgProcEnd*>(&::_HmsgProcEnd_default_instance_);
}
inline ::HmsgProcEnd* Hmsg::mutable_proc_end() {
  if (!has_proc_end()) {
    clear_msg();
    set_has_proc_end();
    msg_.proc_end_ = CreateMaybeMessage< ::HmsgProcEnd >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Hmsg.proc_end)
  return msg_.proc_end_;
}

// .HmsgFileOpen file_open = 4;
inline bool Hmsg::has_file_open() const {
  return msg_case() == kFileOpen;
}
inline void Hmsg::set_has_file_open() {
  _oneof_case_[0] = kFileOpen;
}
inline void Hmsg::clear_file_open() {
  if (has_file_open()) {
    delete msg_.file_open_;
    clear_has_msg();
  }
}
inline const ::HmsgFileOpen& Hmsg::_internal_file_open() const {
  return *msg_.file_open_;
}
inline ::HmsgFileOpen* Hmsg::release_file_open() {
  // @@protoc_insertion_point(field_release:Hmsg.file_open)
  if (has_file_open()) {
    clear_has_msg();
      ::HmsgFileOpen* temp = msg_.file_open_;
    msg_.file_open_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HmsgFileOpen& Hmsg::file_open() const {
  // @@protoc_insertion_point(field_get:Hmsg.file_open)
  return has_file_open()
      ? *msg_.file_open_
      : *reinterpret_cast< ::HmsgFileOpen*>(&::_HmsgFileOpen_default_instance_);
}
inline ::HmsgFileOpen* Hmsg::mutable_file_open() {
  if (!has_file_open()) {
    clear_msg();
    set_has_file_open();
    msg_.file_open_ = CreateMaybeMessage< ::HmsgFileOpen >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Hmsg.file_open)
  return msg_.file_open_;
}

// .HmsgExit exit = 5;
inline bool Hmsg::has_exit() const {
  return msg_case() == kExit;
}
inline void Hmsg::set_has_exit() {
  _oneof_case_[0] = kExit;
}
inline void Hmsg::clear_exit() {
  if (has_exit()) {
    delete msg_.exit_;
    clear_has_msg();
  }
}
inline const ::HmsgExit& Hmsg::_internal_exit() const {
  return *msg_.exit_;
}
inline ::HmsgExit* Hmsg::release_exit() {
  // @@protoc_insertion_point(field_release:Hmsg.exit)
  if (has_exit()) {
    clear_has_msg();
      ::HmsgExit* temp = msg_.exit_;
    msg_.exit_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::HmsgExit& Hmsg::exit() const {
  // @@protoc_insertion_point(field_get:Hmsg.exit)
  return has_exit()
      ? *msg_.exit_
      : *reinterpret_cast< ::HmsgExit*>(&::_HmsgExit_default_instance_);
}
inline ::HmsgExit* Hmsg::mutable_exit() {
  if (!has_exit()) {
    clear_msg();
    set_has_exit();
    msg_.exit_ = CreateMaybeMessage< ::HmsgExit >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Hmsg.exit)
  return msg_.exit_;
}

inline bool Hmsg::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void Hmsg::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline Hmsg::MsgCase Hmsg::msg_case() const {
  return Hmsg::MsgCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_hmsg_2eproto
